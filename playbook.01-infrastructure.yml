---
- hosts: all
  gather_facts: false

  vars:
    aws_cluster_name: flooper
    aws_kube_master_num: 1
    aws_etcd_num: 1
    aws_kube_worker_num: 1
    kubespray_version: 2.12.7
    kubespray_install_dir: /home/centos
    terraform_version: 0.12.28

  tasks:

    - name: upgrade all packages
      become: yes
      yum:
        name: '*'
        state: latest
      vars:
        ansible_python_interpreter: /usr/bin/python

    #
    # The python3-dnf package is not being found. So I am using yum 
    # instead of dnf.
    #
    - name: install packages with python2
      become: yes
      yum:
        name:
          - epel-release
        state: latest
        update_cache: yes
      vars:
        ansible_python_interpreter: /usr/bin/python

    - name: install packages with python2
      become: yes
      yum:
        name:
          - ansible
          - curl
          - jq
          - libselinux-python3
          - openssl
          - python2-jmespath
          - python3
          - python3-pip
          - unzip
        state: latest
        update_cache: yes
      vars:
        ansible_python_interpreter: /usr/bin/python

    - name: Upgrade pip
      pip:
          name: pip
          state: latest

    - name: Install pipenv package
      pip:
        name: pipenv
        state: latest
        executable: /usr/bin/pip3
        extra_args: --user

    - name: does venv exist?
      stat:
        path: "/home/{{ ansible_user }}/venv"
      register: venv_result

    - name: Create python virtual environment
      shell: python3 -m venv venv
      when: venv_result.stat.exists == false

    - name: Install python packages
      pip:
        name: [ "wheel", "ansible", "netaddr" ]
        state: latest

    - name: Setup python venv at login
      become: yes
      copy:
        dest: /etc/profile.d/venv.sh
        content: |
          source $HOME/venv/bin/activate
          cd {{ kubespray_install_dir }}/kubespray-{{ kubespray_version }}

    # Python executables (like pip) are installed into the .local/bin so that
    # is where I am putting the terraform executable.
    - name: Unarchive terraform
      unarchive:
        src: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: "/home/{{ ansible_user }}/.local/bin"
        remote_src: yes

    - name: Unarchive kubespray
      unarchive:
        src: "https://github.com/kubernetes-sigs/kubespray/archive/v{{ kubespray_version }}.tar.gz"
        dest: "{{ kubespray_install_dir }}"
        remote_src: yes

    - name: Create terraform.tfvars
      copy:
        dest: "{{ kubespray_install_dir }}/kubespray-{{ kubespray_version }}/contrib/terraform/aws/terraform.tfvars"
        content: |
          # Global Vars
          aws_cluster_name = "{{ aws_cluster_name }}"

          # VPC Vars
          aws_vpc_cidr_block       = "10.250.192.0/18"
          aws_cidr_subnets_private = [ "10.250.192.0/20", "10.250.208.0/20" ]
          aws_cidr_subnets_public  = [ "10.250.224.0/20", "10.250.240.0/20" ]

          # Bastion Host
          aws_bastion_size = "t3.medium"

          # Kubernetes Cluster
          aws_kube_master_num  = "{{ aws_kube_master_num }}"
          aws_kube_master_size = "t3.medium"

          aws_etcd_num  = "{{ aws_etcd_num }}"
          aws_etcd_size = "t3.medium"

          aws_kube_worker_num  = "{{ aws_kube_worker_num }}"
          aws_kube_worker_size = "t3.medium"

          # Settings AWS ELB
          aws_elb_api_port                = 6443
          k8s_secure_api_port             = 6443
          kube_insecure_apiserver_address = "0.0.0.0"

          default_tags = {
            #  Env = "devtest"
            #  Product = "kubernetes"
          }

          inventory_file = "../../../inventory/hosts"


    - name: Create credentials.tfvars
      copy:
        dest: "{{ kubespray_install_dir }}/kubespray-{{ kubespray_version }}/contrib/terraform/aws/credentials.tfvars"
        content: |
          AWS_ACCESS_KEY_ID = "{{ AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY = "{{ AWS_SECRET_ACCESS_KEY }}"
          AWS_SSH_KEY_NAME = "{{ AWS_SSH_KEY_NAME }}"
          AWS_DEFAULT_REGION = "{{ AWS_DEFAULT_REGION }}"

    # Swap CoreOS for CentOS
    - name: Create variables.tf
      copy:
        dest: "{{ kubespray_install_dir }}/kubespray-{{ kubespray_version }}/contrib/terraform/aws/variables.tf"
        content: |
          variable "AWS_ACCESS_KEY_ID" {
            description = "AWS Access Key"
          }

          variable "AWS_SECRET_ACCESS_KEY" {
            description = "AWS Secret Key"
          }

          variable "AWS_SSH_KEY_NAME" {
            description = "Name of the SSH keypair to use in AWS."
          }

          variable "AWS_DEFAULT_REGION" {
            description = "AWS Region"
          }

          //General Cluster Settings

          variable "aws_cluster_name" {
            description = "Name of AWS Cluster"
          }

          data "aws_ami" "distro" {
            owners      = ["679593333241"]
            most_recent = true

            filter {
                name   = "name"
                values = ["CentOS Linux 7 x86_64 HVM EBS *"]
            }

            filter {
                name   = "architecture"
                values = ["x86_64"]
            }

            filter {
                name   = "root-device-type"
                values = ["ebs"]
            }
          }

          //AWS VPC Variables
          variable "aws_vpc_cidr_block" {
            description = "CIDR Block for VPC"
          }

          variable "aws_cidr_subnets_private" {
            description = "CIDR Blocks for private subnets in Availability Zones"
            type        = "list"
          }

          variable "aws_cidr_subnets_public" {
            description = "CIDR Blocks for public subnets in Availability Zones"
            type        = "list"
          }

          //AWS EC2 Settings

          variable "aws_bastion_size" {
            description = "EC2 Instance Size of Bastion Host"
          }

          /*
          * AWS EC2 Settings
          * The number should be divisable by the number of used
          * AWS Availability Zones without an remainder.
          */
          variable "aws_kube_master_num" {
            description = "Number of Kubernetes Master Nodes"
          }

          variable "aws_kube_master_size" {
            description = "Instance size of Kube Master Nodes"
          }

          variable "aws_etcd_num" {
            description = "Number of etcd Nodes"
          }

          variable "aws_etcd_size" {
            description = "Instance size of etcd Nodes"
          }

          variable "aws_kube_worker_num" {
            description = "Number of Kubernetes Worker Nodes"
          }

          variable "aws_kube_worker_size" {
            description = "Instance size of Kubernetes Worker Nodes"
          }

          /*
          * AWS ELB Settings
          *
          */
          variable "aws_elb_api_port" {
            description = "Port for AWS ELB"
          }

          variable "k8s_secure_api_port" {
            description = "Secure Port of K8S API Server"
          }

          variable "default_tags" {
            description = "Default tags for all resources"
            type        = "map"
          }

          variable "inventory_file" {
            description = "Where to store the generated inventory file"
          }

    - name: Initialize terraform
      shell: "/home/{{ ansible_user }}/.local/bin/terraform init"
      args:
        creates: "/home/{{ ansible_user }}/.terraform.d/checkpoint_cache"
        chdir: "{{ kubespray_install_dir }}/kubespray-{{ kubespray_version }}/contrib/terraform/aws"

    - name: Apply terraform
      shell: "/home/{{ ansible_user }}/.local/bin/terraform apply --var-file=credentials.tfvars --auto-approve"
      args:
        creates: "{{ kubespray_install_dir }}/kubespray-{{ kubespray_version }}/inventory/hosts"
        chdir: "{{ kubespray_install_dir }}/kubespray-{{ kubespray_version }}/contrib/terraform/aws"
